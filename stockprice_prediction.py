# -*- coding: utf-8 -*-
"""stockprice_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RnNaardy6h-dTBKqeHconHGslQohIUyT
"""

#Description: This program uses an artificial recurrent neural network called Long Short
#             Term Memory(LSTM) to predict the closing stock price of a corporation (Apple Inc.)
#             using the past 60 day stock price.

# import the libraries
import math
import pandas_datareader as web
import fix_yahoo_finance
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import requests

plt.style.use('fivethirtyeight')

#原本發現這裡有錯(見https://stackoverflow.com/questions/68227837/pandas-datareader-not-responding-http-status-404)
#解決方案: !pip install --upgrade pandas-datareader
#Get the stock quote
#Show the data
df = web.DataReader('2330.TW', data_source='yahoo', start='2016-01-01', end='2021-8-29')
df

#這是原本想解決上面問題的其中一個想法，但也失敗(沒辦法取得特定時段日期的資料)
#Get the stock quote
#This is from https://stackoverflow.com/questions/68327968/unable-to-get-stock-data-from-yahoo-with-pandas-datareader
#網址直接到yahoo finance找
#link = 'https://finance.yahoo.com/quote/0056.TW/history?period1=1598659200&period2=1630195200&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true'
#r = requests.get(link, headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'})
#pandas_data = pd.read_html(r.text)
#pandas_data

#Get the number of rows and columns in the data set
df.shape

#Visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price TWD', fontsize=18)
plt.show()

#Create a new dataframe with only the 'Close colume'
data=df.filter(['Close'])
#Convert the dataframe to a numpy array
dataset=data.values
#Get the number of rows to trains the model on
#Use 80% data to train
training_data_len=math.ceil(len(dataset)* .8)

training_data_len

#Scale the data
scalar = MinMaxScaler(feature_range=(0,1))
scaled_data = scalar.fit_transform(dataset)

scaled_data

#Create the training data set
#Create the scaled training data set
train_data = scaled_data[0:training_data_len, :]

#Split the data into x_train and y_train data sets
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#Convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#Reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))

#Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences= True, input_shape =(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

#Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

#Create the testing data set
#Create a new array containing scaled values from index 1892 to 2365
test_data = scaled_data[training_data_len - 60: , :]
#Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#Convert the data to a numpy array
x_test = np.array(x_test)
x_test.shape

#Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#Get the models predicted price values
predictions = model.predict(x_test)
predictions = scalar.inverse_transform(predictions)

#Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean( predictions - y_test)**2)
rmse

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions']= predictions
#Visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price TWD', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

#Show the valid and predicted prices
valid

#Get the quote
quote = web.DataReader('2330.TW', data_source='yahoo', start='2016-01-01', end='2021-8-29')
#Create a new dataframe
new_df = quote.filter(['Close'])
#Get the last 60 day closing price values and convert the dataframe to an array
last_60_days = new_df[-60:].values
#Scale the data to be values between 0 and 1
last_60_days_scaled = scalar.transform(last_60_days)
#Create an empty list
X_test = []
#Append the past 60 days
X_test.append(last_60_days_scaled)
#Convert the X_data set to a numpy array
X_test = np.array(X_test)
#Reshape the data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))
#Get the predicted scaled price
pred_price = model.predict(X_test)
#undo the scaling
pred_price = scalar.inverse_transform(pred_price)
print(pred_price)